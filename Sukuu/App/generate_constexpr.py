import os


def get_asset_files(dir, ext):
    directory = os.path.dirname(os.path.realpath(__file__)) + "/asset/" + dir
    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]
    asset_files = [f for f in files if f.endswith(ext)]
    return asset_files


def generate_constexpr(dir, ext):
    asset_files = get_asset_files(dir, ext)
    constexpr_text = ""
    for asset_file in asset_files:
        var_name = asset_file.replace(ext, "")
        constexpr_text += f'constexpr StringView {var_name} = U"asset/{dir}/{asset_file}";\n'

    constexpr_text += "inline Array<StringView> GetKeys(){\nreturn{\n"
    for asset_file in asset_files:
        var_name = asset_file.replace(ext, "")
        constexpr_text += f'{var_name},\n'
    constexpr_text += "};\n}\n"
    return constexpr_text


def generate_resource(dir, ext):
    asset_files = get_asset_files(dir, ext)
    resource_text = ""
    for asset_file in asset_files:
        resource_text += f"Resource(asset/{dir}/{asset_file})\n"
    return resource_text


# Main process 1
def make_constexpr():
    constexpr_content = """
    #pragma once

    // This file is generated by Python script.
    // See: App/asset/generate_constexpr.py

"""
    constexpr_content += "namespace AssetImages{\n"
    constexpr_content += generate_constexpr("image", ".png")
    constexpr_content += "}\n"
    constexpr_content += "namespace AssetSes{\n"
    constexpr_content += generate_constexpr("se", ".mp3")
    constexpr_content += "}\n"
    constexpr_content += "namespace AssetBgms{\n"
    constexpr_content += generate_constexpr("bgm", ".mp3")
    constexpr_content += "}\n"
    with open("../Assets.generated.h", "w", encoding="utf-8") as file:
        file.write(constexpr_content)


# Main process 2
def make_resource():
    resource_content = ""
    resource_content += generate_resource("image", ".png")
    resource_content += generate_resource("se", ".mp3")
    resource_content += generate_resource("bgm", ".mp3")

    with open('Resource_template.txt', 'r', encoding='utf-8') as f:
        content = f.read()
    content = content.replace('$APP_ASSET$', resource_content)
    with open('Resource.rc', 'w', encoding='utf-8') as f:
        f.write(content)


if __name__ == "__main__":
    make_constexpr()
    make_resource()
